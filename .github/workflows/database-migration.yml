name: Alembic

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'alembic/**'
      - 'alembic.ini'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  migrate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set environment variables
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.environment }}" == "production" ]]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_PRD }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event.inputs.environment }}" == "staging" ]]; then
            echo "DATABASE_URL=${{ secrets.DATABASE_URL_STG }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          else
            echo "❌ No matching environment found"
            exit 1
          fi
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install uv
        run: |
          curl -sSf https://install.ultraviolet.rs | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Create virtual environment and install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync
      
      - name: Run database migrations
        run: |
          source .venv/bin/activate
          alembic upgrade head
      
      - name: Verify migration status
        run: |
          source .venv/bin/activate
          alembic current
      
      - name: Notify on success
        if: success()
        run: |
          echo "✅ Database migration completed successfully for ${{ env.ENVIRONMENT }} environment"
      
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Database migration failed for ${{ env.ENVIRONMENT }} environment"
          exit 1 